<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="lqw.test.blog.dao.ArticleDao">

	<resultMap type="lqw.test.blog.domain.Article" id="Group">
		<result column="ArticleldId" property="articleldId" typeHandler="lqw.test.blog.mybatisHandler.ArticleIdHandler"/>
		<result column="Title" property="title" />
		<result column="Content" property="content" />
		<result column="Group" property="groupList"
			typeHandler="lqw.test.blog.mybatisHandler.GroupHandler" />
		<result column="CreateTime" property="createTime" />
		<result column="ModifyTime" property="modifyTime" />
		<result column="Author" property="author" />
		<result column="Modifier" property="modifier" />
	</resultMap>

	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 8 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		9 resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 10 User类就是users表所对应的实体类 
		11 -->
	<select id="queryArticle" resultType="lqw.test.blog.domain.Article"
		resultMap="Group">
		select
		ArticleldId,Title,Content,`Group`,CreateTime,ModifyTime,Author,Modifier
		from article 
		<if test="search != null">where article.Detail LIKE CONCAT('%',#{search},'%') or  article.Title LIKE CONCAT('%',#{search},'%') </if>
		<if test="search == null and group != null">where article.group LIKE CONCAT('%',#{group},'%') </if>
		order by CreateTime desc
		<choose>  
			<when test="start!=null and count!=null">
				limit #{start} , #{count}
			</when>
			<when test="count!=null">
				limit 0,#{count}
			</when>			
			<otherwise>
				
			</otherwise>
		</choose>
		
	</select>
	<select id="queryArticleCount" resultType="java.lang.Integer">
		select
		count(*)
		from article 
		<if test="search != null">where article.Detail LIKE CONCAT('%',#{search},'%') or  article.Title LIKE CONCAT('%',#{search},'%') </if>
		<if test="search == null and group != null">where article.group LIKE CONCAT('%',#{group},'%') </if>				
	</select>

	<select id="queryArticleById" resultType="lqw.test.blog.domain.Article" resultMap="Group">
		select
		ArticleldId,Title,Content,Detail,`Group`,CreateTime,ModifyTime,Author,Modifier
		from article where ArticleldId=#{articleId};
	</select>


	<insert id="addArticle">
		insert into
		article(Title,Content,Detail,`Group`,CreateTime,ModifyTime,Author,Modifier)
		values(#{title},#{content},#{detail},#{group},#{createTime},#{modifyTime},#{author},#{modifier})
	</insert>

	<delete id="delArticleById">
		delete from article where ArticleldId=#{articleId}
	</delete>

	<update id="updateArticle">
		update article set
		Title=#{title},Content=#{content},Detail=#{detail},`Group`=#{group},ModifyTime=#{modifyTime},
		Author=#{author},Modifier=#{modifier} where ArticleldId=#{articleldId}
	</update>
</mapper>